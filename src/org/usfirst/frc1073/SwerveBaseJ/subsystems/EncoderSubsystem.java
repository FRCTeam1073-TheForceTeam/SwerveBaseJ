// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.SwerveBaseJ.subsystems;

import org.usfirst.frc1073.SwerveBaseJ.RobotMap;
import org.usfirst.frc1073.SwerveBaseJ.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class EncoderSubsystem extends Subsystem implements PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogPotentiometer frontLeftPot = RobotMap.encoderSubsystemfrontLeftPot;
    AnalogPotentiometer backLeftPot = RobotMap.encoderSubsystembackLeftPot;
    AnalogPotentiometer frontRightPot = RobotMap.encoderSubsystemfrontRightPot;
    AnalogPotentiometer backRightPot = RobotMap.encoderSubsystembackRightPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isPID;
    private double rampingCoeff;
    private final double FLOFFSET = 219.933;
    private final double FROFFSET = 153.230;
    private final double BLOFFSET = 156.980;
    private final double BROFFSET = 287.976;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	isPID = true;
    	rampingCoeff = 10;
    }
    //get the wheel angles in degrees to keep the modules in the steering range
    public double getFLAngle(){
    	return frontLeftPot.get() - FLOFFSET;
    }
    public double getFRAngle(){
    	return frontRightPot.get() - FROFFSET;
    }
    public double getBLAngle(){
    	return backLeftPot.get() - BLOFFSET;
    }
    public double getBRAngle(){
    	return backRightPot.get() - BROFFSET;
    }
    //PID-specific methods
    
	@Override
	public double getPIDSource(int marker) {
		if(isPID){
			switch (marker){
			case 0:
				return (frontLeftPot.get() - FLOFFSET)/rampingCoeff;
			case 1:
				return (frontRightPot.get() - FROFFSET)/rampingCoeff;
			case 2:
				return (backLeftPot.get() - BLOFFSET)/rampingCoeff;
			case 3:
				return (backRightPot.get() - BROFFSET)/rampingCoeff;
			default:
				return 0;
			}	
		}
		else{
			return 0;
		}
	}
	
	@Override
	public void setPIDOutput(double output, int marker) {
		//not used
	}
	public void enablePIDEncoderParameter(){
		isPID = true;
	}
	public void disablePIDEncoderParameter(){
		isPID = false;
	}
}

